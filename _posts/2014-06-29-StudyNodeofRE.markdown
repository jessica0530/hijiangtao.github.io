---
date: 2014-06-29 23:59:00
layout: post
title: 30分钟入门正则表达式
thread: 134
categories: 教程
tags: debug
---

##入门

**什么是正则表达式？**在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。

网上有很多例子教学，这里整理出一些，对其详细说明以便理解：

* 假设你在一篇英文小说里查找hi，你可以使用正则表达式`hi`。

作为最简单的正则表达式，它可以精确匹配这样的字符串：由h和i组成的两个字符。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi,HI,Hi,hI这四种情况中的任意一种。但由于him,history这种单词中也会出现hi，所以对于精确查找hi的人来说，应该使用`\bhi\b`。

`\b`是元字符，代表单词的开头或结尾，即单词分界处。\b只匹配一个位置，而非字符，精确的说法是：

>**\b**匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在)**\w**。

* 假如你要找的是hi后面不远处跟着一个Lucy，你应该用`\bhi\b.*\bLucy\b`。

**[.]**是另一个元字符，匹配除了换行符以外的任意字符。**[\*]**同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定**[\*]**前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，**[.\*]**连在一起就意味着任意数量的不包含换行的字符。

* `0\d\d-\d\d\d\d\d\d\d\d`匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字。这里`\d`是一个新的元字符，匹配一位数字。为了解决连续匹配/重复的问题，该命令也可以这样写`0\d{2}-\d{8}`。

----

##元字符

* **\ba\w\*\b**匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)。
* **\d+**匹配1个或更多连续的数字。这里的+是和\*类似的元字符，不同的是\*匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。
* **\b\w{6}\b**匹配刚好6个字符的单词。
* 元字符**^**（和数字6在同一个键位上的符号）和**$**都匹配一个位置，这和\b有点类似。^匹配你要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：`^\d{5,12}$`。

----

<table>
        <thead>
            <tr>
                <th>代码</th>
                <th>说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><span>.</span></td>
                <td><span class="desc">匹配除换行符以外的任意字符</span></td>
            </tr>
            <tr>
                <td><span>\w</span></td>
                <td><span class="desc">匹配字母或数字或下划线或汉字</span></td>
            </tr>
            <tr>
                <td><span>\s</span></td>
                <td><span>匹配任意的空白符</span></td>
            </tr>
            <tr>
                <td><span>\d</span></td>
                <td><span>匹配数字</span></td>
            </tr>
            <tr>
                <td><span>\b</span></td>
                <td><span>匹配单词的开始或结束</span></td>
            </tr>
            <tr>
                <td><span>^</span></td>
                <td><span>匹配字符串的开始</span></td>
            </tr>
            <tr>
                <td><span>$</span></td>
                <td><span>匹配字符串的结束</span></td>
            </tr>
        </tbody>
    </table>

<center>常见的元字符</center>

----

正则表达式引擎通常会提供一个“测试指定的字符串是否匹配一个正则表达式”的方法，如JavaScript里的RegExp.test()方法或.NET里的Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。

*注：RegExp.test()用法，如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。*

----

##字符转义

如果你想查找元字符本身的话，比如你查找\.,或者
\*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\\来取消这些字符的特殊意义。因此，你应该使用`\.`和`\*`。当然，要查找\本身，你也得用`\\`。

例如：`deerchao\.net`匹配`deerchao.net`，`C:\\Windows`匹配`C:\Windows`。

----

##重复

下面是正则表达式中所有的限定符：

<table>
        <thead>
            <tr>
                <th>代码/语法</th>
                <th>说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><span>*</span></td>
                <td><span>重复零次或更多次</span></td>
            </tr>
            <tr>
                <td><span>+</span></td>
                <td><span>重复一次或更多次</span></td>
            </tr>
            <tr>
                <td><span>?</span></td>
                <td><span>重复零次或一次</span></td>
            </tr>
            <tr>
                <td><span>{n}</span></td>
                <td><span>重复n次</span></td>
            </tr>
            <tr>
                <td><span>{n,}</span></td>
                <td><span>重复n次或更多次</span></td>
            </tr>
            <tr>
                <td><span>{n,m}</span></td>
                <td><span>重复n到m次</span></td>
            </tr>
        </tbody>
</table>
    
----

##字符类

* **匹配没有预定义的字符集合**：很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。
* `\(?0\d{2}[) -]?\d{8}`:这个表达式首先是一个转义字符`\(`,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(`\d{2}`)，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(`\d{8}`)。

----

##分枝条件

正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。
* `0\d{2}-\d{8}|0\d{3}-\d{7}`：这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。
* `\(?0\d{2}\)?[- ]?\d{8}|0\d{2}[- ]?\d{8}`：这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。
* `\d{5}-\d{4}|\d{5}`这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：**使用分枝条件时，要注意各个条件的顺序。**如果你把它改成`\d{5}|\d{5}-\d{4}`的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。

----

##分组

用小括号来指定子表达式(也叫做分组)，然后就可以指定这个子表达式的重复次数了。

* `(\d{1,3}\.){3}\d{1,3}`是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：`\d{1,3}`匹配1到3位的数字，`(\d{1,3}\.){3}`匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字`\d{1,3}`。

但是这样的匹配并没有筛选掉不合理的IP地址，如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：

```
((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)
```

----

##反义

有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义，以下为常见的反义字符表：

<table>
        <thead>
            <tr>
                <th>代码/语法</th>

                <th>说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><span>\W</span></td>
                <td><span>匹配任意不是字母，数字，下划线，汉字的字符</span></td>

            </tr>
            <tr>
                <td><span>\S</span></td>
                <td><span>匹配任意不是空白符的字符</span></td>
            </tr>
            <tr>
                <td><span>\D</span></td>

                <td><span>匹配任意非数字的字符</span></td>
            </tr>
            <tr>
                <td><span>\B</span></td>
                <td><span>匹配不是单词开头或结束的位置</span></td>
            </tr>
            <tr>

                <td><span>[^x]</span></td>
                <td><span>匹配除了x以外的任意字符</span></td>
            </tr>
            <tr>
                <td><span>[^aeiou]</span></td>
                <td><span>匹配除了aeiou这几个字母以外的任意字符</span></td>
            </tr>

        </tbody>
</table>

----

##后向引用

有关组号：

1. 分组0对应整个正则表达式；
2. 实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号；
3. 你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权。

因为默认分组情况下，每个分组都会自动拥有一个组号，规则是自左向右，以分组的左括号为标志，第一个出现的分组组号为1，以此类推。而后向引用用于重复搜索前面某个分组匹配的文本。举个例子：

* **\b(\w+)\b\s+\1\b** 可以用来匹配重复的单词，像go go、hello hello等。其匹配的是一个多于一个数量的字母或数字（`\b(\w+)\b`），这个单词会被捕获到编号为1的分组中，然后是一个或几个空白符。

除此之外，子表达式的组名时可以自定义的。要指定一个子表达式的组名，请使用这样的语法：(`?<Word>\w+`)(或者把尖括号换成'也行：(`?'Word'\w+`)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用`\k<Word>`,所以上一个例子也可以写成这样：`\b(?<Word>\w+)\b\s+\k<Word>\b`。

常用的分组语法如下：

<table>
	<tbody>
		<tr>
			<th>分类</th>
			<th>代码/语法</th>

			<th>说明</th>
		</tr>
		<tr>
			<th>捕获</th>
			<td><span>(exp)</span></td>
			<td><span>匹配exp,并捕获文本到自动命名的组里</span></td>
		</tr>

		<tr>
			<td><span>(?&lt;name&gt;exp)</span></td>
			<td><span>匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)</span></td>
		</tr>
		<tr>
			<td><span>(?:exp)</span></td>

			<td><span>匹配exp,不捕获匹配的文本，也不给此分组分配组号</span></td>
		</tr>
		<tr>
			<th>零宽断言</th>
			<td><span>(?=exp)</span></td>
			<td><span>匹配exp前面的位置</span></td>
		</tr>

		<tr>
			<td><span>(?&lt;=exp)</span></td>
			<td><span>匹配exp后面的位置</span></td>
		</tr>
		<tr>
			<td><span>(?!exp)</span></td>
			<td><span>匹配后面跟的不是exp的位置</span></td>

		</tr>
		<tr>
			<td><span>(?&lt;!exp)</span></td>
			<td><span>匹配前面不是exp的位置</span></td>
		</tr>
		<tr>
			<th>注释</th>

			<td><span>(?#comment)</span></td>
			<td><span>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</span></td>
		</tr>
	</tbody>
</table>

----

##零宽断言

* **`(?=exp)`也叫零宽度正预测先行断言**，它断言自身出现的位置的后面能匹配表达式exp。比`如\b\w+(?=ing\b)`，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I'm singing while you're dancing.时，它会匹配sing和danc。

* **`(?<=exp)`也叫零宽度正回顾后发断言**，它断言自身出现的位置的前面能匹配表达式exp。比如`(?<=\bre)\w+\b`会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。

* **`((?<=\d)\d{3})+\b`**：假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?<=\d)\d{3})+\b，用它对1234567890进行查找时结果是234567890。

*注：断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。*

----

##负向零宽断言

如果我们想查找这样的单词--它里面出现了字母q,但是q后面跟的不是字母u，该怎么办呢？

我们可以尝试：`\b\w*q[^u]\w*\b`匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的`\w*\b`将会匹配下一个单词，于是`\b\w*q[^u]\w*\b`就能匹配整个Iraq fighting。**负向零宽断言**能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。

```
\b\w*q(?!u)\w*\b
```

**零宽度负预测先行断言**`(?!exp)`，断言此位置的后面不能匹配表达式exp。

**零宽度负回顾后发断言**`(?<!exp)`来断言此位置的前面不能匹配表达式exp。

一个更复杂的例子：`(?<=<(\w+)>).*(?=<\/\1>)`匹配不包含属性的简单HTML标签内里的内容。`(?<=<(\w+)>)`指定了这样的前缀：被尖括号括起来的单词(比如可能是`<b>`)，然后是.\*(任意的字符串),最后是一个后缀`(?=<\/\1>)`。注意后缀里的`\/`，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的`(\w+)`匹配的内容，这样如果前缀实际上是`<b>`的话，后缀就是`</b>`了。整个表达式匹配的是`<b>`和`</b>`之间的内容(再次提醒，不包括前缀和后缀本身)。

----

##注释

小括号的另一种用途是通过语法(?#comment)来包含注释。要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。举例如下：

```
(?<=    # 断言要匹配的文本的前缀
<(\w+)> # 查找尖括号括起来的字母或数字(即HTML/XML标签)
)       # 前缀结束
.*      # 匹配任意文本
(?=     # 断言要匹配的文本的后缀
<\/\1>  # 查找尖括号括起来的内容：前面是一个"/"，后面是先前捕获的标签
)       # 后缀结束
```

----

##贪婪与懒惰

当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.\*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。

有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。

* `a.*?b`匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。

但为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则：

>The match that begins earliest wins.

**懒惰限定符**

<table>
	<thead>
		<tr>
			<th>代码/语法</th>
			<th>说明</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td><span>*?</span></td>
			<td><span>重复任意次，但尽可能少重复</span></td>
		</tr>
		<tr>

			<td><span>+?</span></td>
			<td><span>重复1次或更多次，但尽可能少重复</span></td>
		</tr>
		<tr>
			<td><span>??</span></td>
			<td><span>重复0次或1次，但尽可能少重复</span></td>
		</tr>

		<tr>
			<td><span>{n,m}?</span></td>
			<td><span>重复n到m次，但尽可能少重复</span></td>
		</tr>
		<tr>
			<td><span>{n,}?</span></td>
			<td><span>重复n次以上，但尽可能少重复</span></td>

		</tr>
	</tbody>
</table>

----

##处理选项

上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。比如忽略大小写、多行模式、单行模式、忽略空白、显式捕获等。由于我没有亲自实践过，故在此不再做详细介绍。

----

##平衡组/递归匹配

有时我们需要匹配像( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构，这时简单地使用\(.+\)则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 / ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？

这里需要用到以下的语法构造：

* `(?'group')` 把捕获的内容命名为group,并压入堆栈(Stack);
* `(?'-group')` 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败;
* `(?(group)yes|no)` 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分;
* `(?!)` 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败.

完整代码如下所示：

{% highlight javascript linenos %} 
<                         #最外层的左括号
    [^<>]*                #最外层的左括号后面的不是括号的内容
    (
        (
            (?'Open'<)    #碰到了左括号，在黑板上写一个"Open"
            [^<>]*       #匹配左括号后面的不是括号的内容
        )+
        (
            (?'-Open'>)   #碰到了右括号，擦掉一个"Open"
            [^<>]*        #匹配右括号后面不是括号的内容
        )+
    )*
    (?(Open)(?!))         #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的"Open"；如果还有，则匹配失败

>                         #最外层的右括号
{% endhighlight %}

平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的<div>标签：

```
<div[^>]*>[^<>]*(((?'Open'<div[^>]*>)[^<>]*)+((?'-Open'</div>)[^<>]*)+)*(?(Open)(?!))</div>
```

----

##还有些什么

说到这里，还是有很多没有提及，想要进一步学习可以查看：

* [精通正则表达式（第3版）](http://book.360buy.com/11070361.html?sid=deerchao&t=1)
* [微软的正则表达式教程](http://msdn.microsoft.com/library/chs/default.asp?url=/library/CHS/jscript7/html/jsreconintroductiontoregularexpressions.asp)
* [System.Text.RegularExpressions.Regex类(MSDN)](http://msdn2.microsoft.com/zh-cn/library/system.text.regularexpressions.regex.aspx)
* [专业的正则表达式教学网站(英文)](http://www.regular-expressions.info/)
* [关于.Net下的平衡组的详细讨论（英文）](http://weblogs.asp.net/whaggard/archive/2005/02/20/377025.aspx)

----

*注：整理自[正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm)，有删减。*
